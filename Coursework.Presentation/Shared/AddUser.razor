@using System.Text;
@using Newtonsoft.Json;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient _httpClient

@inject ISnackbar Snackbar
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.SupervisedUserCircle" Class="mr-3 mb-n1" />
            Add User
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="col-12 d-flex justify-content-center align-item-center">
            <MudPaper Class="pa-5 mx-auto ma-2" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius: 8px;">
                <div class="mt-3">
                    <MudText>@User.Username</MudText>
                    <MudForm @ref="form" @bind-IsValid="@isSuccess" @onsubmit="handleSubmit" @bind-Errors="@errors" ReadOnly="false">
                        <MudGrid Spacing=3>
                            <MudItem xs="12">
                                <MudTextField Class="mt-3" @bind-Value="Name" Required="true" RequiredError="Name is required" Label="Name" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                            </MudItem>
                        </MudGrid>
                        <MudGrid Spacing=3>
                            <MudItem xs="6">
                                <MudTextField Class="mt-3" @bind-Value="UserName" Required="true" RequiredError="UserName is required" Label="Username" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField T="string" Class="mt-3" @bind-Value="Email" Required="true" RequiredError="Email is required" Label="Email"
                                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"
                                              Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                            </MudItem>
                        </MudGrid>
                        <MudGrid Spacing=3>
                            <MudItem xs="6">
                                <MudTextField Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                              RequiredError="Password is required!"
                                              @ref="pwField1"
                                              Class="mt-3" @bind-Value="Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Class="mt-3" @bind-Value="ConfirmPassword" Label=" Confirm Password" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, string>(PasswordMatch))" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                            </MudItem>
                        </MudGrid>
                        <MudGrid Spacing=3>
                            <MudItem xs="6">
                                <MudTextField Class="mt-3" @bind-Value="Phone"
                                              Required="true"
                                              RequiredError="Phone number is required" Label="Mobile Number" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Class="mt-3" @bind-Value="Address" Required="true" RequiredError="Address is required" Label="Address" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                            </MudItem>
                        </MudGrid>
                        <MudGrid Spacing="3">
                            <MudItem xs="12">
                                <MudSelect @bind-Value="EmployeeType" HelperText="Stirng" Label="Price" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@("Staff")">Staff</MudSelectItem>
                                    <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                        <MudCardActions>
                            <MudButton Disabled="@(_processing)"
                                       Size="Size.Large" StartIcon="@Icons.Material.Filled.SupervisedUserCircle" Class="mt-14" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary"
                                       ButtonType="ButtonType.Submit">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>Add</MudText>
                                }

                            </MudButton>
                        </MudCardActions>
                    </MudForm>
                    @*<MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Class="mt-14" Disabled="@_processing" OnClick="ProcessSomething" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">*@


                    @*</MudButton>*@

                </div>
            </MudPaper>
        </div>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    MudForm form;
    string[] errors = { };
    bool isShow;
    bool isSuccess;
    bool success = false;
    public string Name { get; set; }
    public string UserName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public string ConfirmPassword { get; set; }
    public string Phone { get; set; }
    public string Address { get; set; }
    public string EmployeeType { get; set; }

    public bool _processing { get; set; }
    MudTextField<string> pwField1;


    [Parameter]
    public UserInfo User { get; set; }
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }



    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    async Task handleSubmit()
    {
        _processing = true;
        var data = new
        {
            password = Password,
            confirmPassword = ConfirmPassword,
            username = UserName,
            name = Name,
            email = Email,
            address = Address,
            phone = Phone,
            employeeType = EmployeeType
        };
        var json = JsonConvert.SerializeObject(data);
        var content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
        if (content != null)
        {
            var response = await HttpClientExtension.AuthPostAsync<ApiResponse>(_httpClient, "https://localhost:7190/api/admin/register-employee", content, User.Token.ToString());
            // Process the response as needed
            if (response != null && response.Status == "Success")
            {
                Snackbar.Add("User Added Successfully!", Severity.Success);
                _processing = false;
                StateHasChanged();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                // Handle error responses
                Snackbar.Add($"{response.Message}", Severity.Error);
                _processing = false;
            }
        }
        else
        {
            Snackbar.Add("Some Problem Occured", Severity.Error);
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private bool _autoClose;
}
