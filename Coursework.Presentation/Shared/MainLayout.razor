@inherits LayoutComponentBase
@using Blazored.LocalStorage;
@inject UserService UserService
@inject NavigationManager NavigationManager



<MudThemeProvider @ref="@_mudThemeProvider"  @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="_user" Name="UserInfo">
    <CascadingValue Value="@IsOfficeHours" Name="OfficeHoursInfo">
        <MudLayout>
            <MudAppBar Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <MudText Typo="Typo.h5">Hajur Ko Car Rental</MudText>
                <MudSpacer />
                @if (_user?.Username != null)
                {

                    <MudButton Class="mr-3" Color="Color.Inherit" Size="Size.Medium" StartIcon="@Icons.Material.Outlined.Logout" OnClick="@Logout">
                    </MudButton>
                }
                @if (_isDarkMode)
                {
                    <MudSwitch @bind-Checked="@_isDarkMode" ThumbIcon="@Icons.Material.Outlined.LightMode" ThumbIconColor="Color.Info"></MudSwitch>
                }
                else
                {
                    <MudSwitch @bind-Checked="@_isDarkMode" ThumbIcon="@Icons.Material.Outlined.DarkMode" ThumbIconColor="Color.Info"></MudSwitch>
                }
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
                <MudDrawerHeader>
                    <MudImage Src="logo.png" />
                </MudDrawerHeader>
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraExtraLarge">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
        </CascadingValue>
    </CascadingValue>

    @code {
        bool _drawerOpen = true;
        private bool _isDarkMode;
        private UserInfo _user;
        private bool IsOfficeHours { get; set; } = IsOfficeActive();
        private string currentUri { get; set; }
        protected override void OnInitialized()
        {
            _user = UserService.GetUser();
            UserService.OnUserChanged += OnUserChanged;
            currentUri = NavigationManager.Uri;
        }

        private void OnUserChanged()
        {
            _user = UserService.GetUser();
            StateHasChanged();
        }

        public void Dispose()
        {
            UserService.OnUserChanged -= OnUserChanged;
        }
        private MudThemeProvider _mudThemeProvider;
        MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Primary = Colors.Indigo.Darken2,
                Secondary = Colors.Amber.Default,
                AppbarBackground = Colors.Indigo.Darken2,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Teal.Darken2,
                Secondary = Colors.Amber.Default,
                AppbarBackground = Colors.Teal.Darken2,
            },
        };


        private void Logout()
        {
            UserService.ClearUser();
            NavigationManager.NavigateTo("/login");
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                StateHasChanged();
            }
        }

        public static bool IsOfficeActive()
        {
            TimeSpan currentTime = DateTime.Now.TimeOfDay;
            TimeSpan startTime = TimeSpan.Parse("09:00:00");
            TimeSpan endTime = TimeSpan.Parse("16:00:00");
            DayOfWeek day = DateTime.Now.DayOfWeek;

            if (day != DayOfWeek.Sunday || day != DayOfWeek.Saturday)
            {
                if (currentTime >= startTime && currentTime <= endTime)
                {
                    return true;
                }
            }
            return false;
        }
        void DrawerToggle()
        {
            _drawerOpen = !_drawerOpen;
        }
    }
