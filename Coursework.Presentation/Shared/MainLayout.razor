@inherits LayoutComponentBase
@using Blazored.LocalStorage;
@inject UserService UserService



<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="_user" Name="UserInfo">
    <MudLayout>
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            @if (_isDarkMode)
            {
                <MudSwitch @bind-Checked="@_isDarkMode" ThumbIcon="@Icons.Material.Outlined.LightMode" ThumbIconColor="Color.Info"></MudSwitch>
            }
            else
            {
                <MudSwitch @bind-Checked="@_isDarkMode" ThumbIcon="@Icons.Material.Outlined.DarkMode" ThumbIconColor="Color.Info"></MudSwitch>
            }
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Cars Rental</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>

</CascadingValue>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private UserInfo _user;

    protected override void OnInitialized()
    {
        _user = UserService.GetUser();
        UserService.OnUserChanged += UpdateComponent;
    }


    private void UpdateComponent()
    {
        // Refresh the component when the user logs in
        StateHasChanged();
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        UserService.OnUserChanged -= UpdateComponent;
    }

    private MudThemeProvider _mudThemeProvider;
    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Teal.Darken1,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Teal.Lighten1,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Teal.Darken1,
        },
    };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
