@using System.Text;
@using Newtonsoft.Json;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@page "/change-password"
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Change Password</PageTitle>
<div class="row min-vh-100">
    <div class="col-12 d-flex justify-content-center align-item-center">
        <MudPaper Width="450px" Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius: 8px;">
            <MudForm @ref="form" @onsubmit="handleSubmit" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">

                <div class="text-center mx-auto">
                    <MudText Class="mt-1 mx-auto" Typo="Typo.h5">Change Password</MudText>

                </div>
                <div class="mt-3">
                    <MudTextField Required="true"
                                  RequiredError="Password is required!"
                                  Class="mt-7" @bind-Value="Password" Label="Current Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                    <MudTextField Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!"
                                  @ref="pwField1"
                                  Class="mt-7" @bind-Value="NewPassword" Label="New Password" Variant="Variant.Outlined" InputType="@NewPasswordInput" Adornment="Adornment.End" AdornmentIcon="@NewPasswordInputIcon" OnAdornmentClick="NewPasswordButtonClick" AdornmentAriaLabel="Show Password" />

                    <MudTextField Required="true"
                                  RequiredError="Confirm Password is required!"
                                  Class="mt-7" @bind-Value="ConfirmPassword" Label=" Confirm Password" Variant="Variant.Outlined"
                                  Validation="@(new Func<string, string>(PasswordMatch))" InputType="@ConfirmPasswordInput" Adornment="Adornment.End" AdornmentIcon="@ConfirmPasswordInputIcon" OnAdornmentClick="ConfirmPasswordButtonClick" AdornmentAriaLabel="Show Password" />

                    @*<MudAlert id="err" style="display: none; margin-top: 10px;" Severity="Severity.Warning" Variant="Variant.Outlined">@Emessage</MudAlert>*@
                    <p style="color: red;">@Emessage</p>
                    <MudButton
                                ButtonType="ButtonType.Submit"
                               Size="Size.Large" StartIcon="@Icons.Material.Filled.Key" Class="mt-14" Disabled="@_processing"  FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Change Password</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </div>
</div>

@code {
    public string Password { get; set; }
    public string NewPassword { get; set; }
    public string ConfirmPassword { get; set; }
    public string Emessage { get; set; }
    private bool _processing = false;
    MudTextField<string> pwField1;
    bool isShow;
    bool newPassShow;
    bool confPassShow;
    MudForm form;
    string[] errors = { };
    bool success;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType NewPasswordInput = InputType.Password;
    string NewPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void NewPasswordButtonClick()
    {
        @if (newPassShow)
        {
            newPassShow = false;
            NewPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            NewPasswordInput = InputType.Password;
        }
        else
        {
            newPassShow = true;
            NewPasswordInputIcon = Icons.Material.Filled.Visibility;
            NewPasswordInput = InputType.Text;
        }
    }

    void ConfirmPasswordButtonClick()
    {
        @if (confPassShow)
        {
            confPassShow = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            confPassShow = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    // login user
    async Task handleSubmit()
    {
        _processing = true;
        var client = new HttpClient();
        var data = new { password = Password, newpassword = NewPassword, confirmpassword = ConfirmPassword };
        var content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
        var response = await client.PostAsync("https://localhost:7190/api/change-password", content);
        var result = await response.Content.ReadAsStringAsync();

        // Process the response...
        dynamic jsonResponse = JsonConvert.DeserializeObject(result);
        if (jsonResponse.status == "Success")
        {
            Snackbar.Add("Password Changed Successfully!", Severity.Success);
            _processing = false;
            await Task.Delay(1000);
        }
        else if(jsonResponse.status == "Error")
        {
            // Handle error responses
            Snackbar.Add($"{jsonResponse.message}", Severity.Error);
            _processing = false;
        }
        else
        {
            Snackbar.Add("Some Problem Occured", Severity.Error);
        }

    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}

