@using System.Text;
@using Newtonsoft.Json;
@using System.Collections.Specialized;
@using System.Web;
@page "/reset-password"
@inject AuthenticationStateService AuthenticationService;
@inject NavigationManager NavManager

<PageTitle>Reset Password</PageTitle>
<div class="row min-vh-100">
    <div class="col-12 d-flex justify-content-center align-item-center">
        @if (_success)
        {
            <MudPaper Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius: 8px;">
                <div class="text-center mx-auto">
                    <MudText Class="mt-1 mx-auto text-primary" Typo="Typo.h5">Password Reset Successful.</MudText>
                </div>
                <div class="mt-3">
                    <p>Thank you for resetting your password.</p>
                </div>
                <div class="d-flex text-start">
                    <MudLink Href="login" Class="mt-5 text-primary" Typo="Typo.body2">Back to Login</MudLink>
                </div>
            </MudPaper>
        }
        else
        {
            <MudPaper Width="350px" Height="400px" Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; border-radius: 8px;">
                <div class="text-center mx-auto">
                    <MudText Class="mt-1 mx-auto" Typo="Typo.h5">Reset Password</MudText>

                </div>
                <div class="mt-3">
                    <MudTextField Class="mt-7" @bind-Value="InitPassword" Label="New Password" Variant="Variant.Outlined" InputType="@InitPasswordInput" Adornment="Adornment.End" AdornmentIcon="@InitPasswordInputIcon" OnAdornmentClick="InitPasswordFieldButtonClick" AdornmentAriaLabel="Show Password" />
                    <p style="color: red;" class="mt-1">@InitPassEmessage</p>
                    <MudTextField Class="mt-7" @bind-Value="Password" Label="Confirm Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="PasswordFieldButtonClick" AdornmentAriaLabel="Show Password" />
                    @*<MudAlert id="err" style="display: none; margin-top: 10px;" Severity="Severity.Warning" Variant="Variant.Outlined">@Emessage</MudAlert>*@
                    <p style="color: red;" class="mt-1">@Emessage</p>
                    <MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Class="mt-14" Disabled="@_processing" OnClick="ProcessResetPassword" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Reset Password</MudText>
                        }
                    </MudButton>
                </div>
            </MudPaper>
        }
    </div>
</div>

@code {
    public string Token { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public string InitPassword { get; set; }
    public string InitPassEmessage { get; set; }
    public string Emessage { get; set; }
    private bool _processing = false;
    private bool _success = false;
    bool initPassShow;
    bool passShow;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType InitPasswordInput = InputType.Password;
    string InitPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        string queryString = NavManager.ToAbsoluteUri(NavManager.Uri).Query;
        NameValueCollection query = HttpUtility.ParseQueryString(queryString);
        Token = query["token"];
        Email = query["email"];
    }

    void InitPasswordFieldButtonClick()
    {
        @if (initPassShow)
        {
            initPassShow = false;
            InitPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            InitPasswordInput = InputType.Password;
        }
        else
        {
            initPassShow = true;
            InitPasswordInputIcon = Icons.Material.Filled.Visibility;
            InitPasswordInput = InputType.Text;
        }
    }

    void PasswordFieldButtonClick()
    {
        @if (passShow)
        {
            passShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            passShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    // login user
    async Task ProcessResetPassword()
    {
        InitPassEmessage = "";
        Emessage = "";
        //_processing = true;

        if (InitPassword == "" || InitPassword == null || InitPassword == "" || Password == null)
        {
            Console.WriteLine("Empty Fields Found");
            Emessage = "Empty Fields Found";
            InitPassEmessage = "Empty Fields Found";
            //await Task.Delay(1000);
            //_processing = false;
            return;
        }
        if (InitPassword != Password)
        {
            Console.WriteLine("Confirm password should match the password");
            Emessage = "Confirm password should match the password";
            //await Task.Delay(1000);
            //_processing = false;
            return;
        }
        if (Password.Length <= 5)
        {
            InitPassEmessage = "Password should be 6 characters long";
        }
        else
        {
            _processing = true;
            var client = new HttpClient();
            var data = new { token = Token, password = Password, email = Email };
            var content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
            var response = await client.PostAsync("https://localhost:7190/api/reset-password", content);
            var result = await response.Content.ReadAsStringAsync();

            dynamic jsonResponse = JsonConvert.DeserializeObject(result);
            Console.WriteLine($"status: {jsonResponse.status}");
            Console.WriteLine($"data:{jsonResponse.role}");
            if (jsonResponse.status == "Success")
            {
                _processing = false;
                _success = true;
            }
            else
            {
                // Handle error responses
                Console.WriteLine($"Response body: {jsonResponse.message}");
                Emessage = jsonResponse.message;
                _processing = false;
            }
        }
    }
}

