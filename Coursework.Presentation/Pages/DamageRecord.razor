@page "/damage-record"
@using System.Net.Http.Json
@using MudBlazor
@using System.Text;
@using Newtonsoft.Json;
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Damange Record</PageTitle>
<MudTable Class="mt-5" Items="@Elements" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<MyBookingDetails,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">My Booking Request</MudText>
        <MudSpacer />
        <MudSelect Margin="Margin.Dense" T="string" Label="Approval Status" Variant="Variant.Outlined" Class="justify-content-center" @bind-Value="_selectedValue">
            <MudSelectItem Value="@("Approved")" />
            <MudSelectItem Value="@("Paid")" />
            <MudSelectItem Value="@("Pending")" />
            <MudSelectItem Value="@("All")" />
        </MudSelect>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
     
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
        <col style="width:14%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel Class="text-center" InitialDirection="SortDirection.Ascending" SortBy="new Func<MyBookingDetails, object>(x=>x.Name)"> Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<MyBookingDetails, object>(x=>x.Image)">Image</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<MyBookingDetails, object>(x=>x.RentStartDate)">Start-Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<MyBookingDetails, object>(x=>x.RentEndDate)">End-Date</MudTableSortLabel></MudTh>
        <MudTh>Status</MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<MyBookingDetails, object>(x=>x.TotalAmount)">Total</MudTableSortLabel></MudTh>
        <MudTh>Payment</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-center" DataLabel="Customer Name">@context.Name</MudTd>
        <MudTd Class="text-center" DataLabel="Car Name">
            <MudImage Width="60" Height="60" Src=@context.Image Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
        </MudTd>
        <MudTd Class="text-center" DataLabel="Start Date">@context.RentStartDate</MudTd>
        <MudTd Class="text-center" DataLabel="End Date">@context.RentEndDate</MudTd>
        <MudTd Class="text-center">
            @if (context.IsDeleted == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Cancelled</MudChip>
            }
            else if (context.IsCompleted == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Surface">Completed</MudChip>

            }
            else if ((context.OnRent == true) && (context.IsCompleted == true || context.IsCompleted == false))
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Info">On Rent</MudChip>

            }
            else if (context.IsApproved == null)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Warning">Pending</MudChip>

            }
            else if (context.IsApproved == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Success">Approved</MudChip>

            }
            else if (context.IsApproved == false)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Rejected</MudChip>

            }
        </MudTd>
        <MudTd Class="text-center" DataLabel="Total Amount">NPR @context.TotalAmount</MudTd>
        <MudTd Class="text-center" DataLabel="IsPaid">
            @if (context?.IsPaid == true)
            {
                <MudChip Variant="Variant.Filled" Color="Color.Info">Paid</MudChip>

            }
            else if (context.IsPaid != true && context.IsApproved == true)
            {
                <button @onclick="((e)=>handlePayment(context.Id))" class="khalti-btn">Pay Now</button>
            }
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public bool _loading { get; set; } = true;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private MyBookingDetails selectedItem1 = null;
    private HashSet<MyBookingDetails> selectedItems1 = new HashSet<MyBookingDetails>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<MyBookingDetails> Elements = new List<MyBookingDetails>();
    private string _selectedValue = "All";

    
    private async Task handlePayment(string id)
    {
        var data = new { bookingId = id };
        var json = JsonConvert.SerializeObject(data);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        if (content != null)
        {
            var response = await HttpClientExtension.AuthPostAsync<dynamic>(_httpClient, "https://localhost:7190/api/khalti-payment", content, User.Token.ToString());
            Console.WriteLine(response.status);
            if (response != null && response.status == "Success")
            {
                Console.WriteLine("Here");
                // Open the payment URL in a new tab
                var paymentUrl = response.data?.payment_url;
                Console.WriteLine(paymentUrl);
                if (!string.IsNullOrEmpty($"{paymentUrl}"))
                {
                    NavigationManager.NavigateTo($"{paymentUrl}");
                }
            }
            else
            {
                Snackbar.Add($"{response?.data?.error}", Severity.Error);
            }
        }
    }




    protected override async Task OnInitializedAsync()
    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/damage-record"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<MyBookingDetails>>>("https://localhost:7190/api/my-booking", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }



    private bool FilterFunc(MyBookingDetails element)
    {
        string status = "";

        if (element.IsDeleted == true)
        {
            status = "Cancelled";
        }
        else if (element.IsApproved == null)
        {
            status = "Pending";
        }
        else if (element.IsApproved == true)
        {
            status = "Approved";
        }
        else if (element.IsApproved == true && element.IsPaid == true)
        {
            status = "Paid";
        }

        if (string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            return true;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
            return false;
        }
        else if (string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status)
            {
                return true;
            }
            return false;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status && element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }
        return false;
    }
}