@page "/damage-record"
@using System.Net.Http.Json
@using MudBlazor
@using System.Text;
@using Newtonsoft.Json;
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Damage Record</PageTitle>
<MudTable Class="mt-5" Items="@Elements" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit" Filter="new Func<AdditionalCharges,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">My Damage Record</MudText>
        <MudSpacer />
        <MudSelect Margin="Margin.Dense" T="string" Label="Approval Status" Variant="Variant.Outlined" Class="justify-content-center" @bind-Value="_selectedValue">
            <MudSelectItem Value="@("Paid")" />
            <MudSelectItem Value="@("UnPaid")" />
            <MudSelectItem Value="@("All")" />
        </MudSelect>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search by car name or description" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>

        <col style="width:25%;" />
        <col style="width:25%;" />
        <col style="width:25%;" />
        <col style="width:25%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel Class="text-center" InitialDirection="SortDirection.Ascending" SortBy="new Func<AdditionalCharges, object>(x=>x.CarId)"> Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<AdditionalCharges, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-center" DataLabel="Car Name">@context.CarId</MudTd>
        <MudTd Class="text-center" DataLabel="Description">@context.Description</MudTd>
        <MudTd Class="text-center" DataLabel="End Date">
            @if (context.Amount != 0)
            {
                @context.Amount
            }
            else
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Pending</MudChip>

            }
        </MudTd>
        <MudTd Class="text-center">
            @if (context.IsPaid == true)
            {
                <MudChip Variant="Variant.Filled" Color="Color.Success">Paid</MudChip>
            }
            else if (context.IsPaid == false)
            {
                <MudChip Variant="Variant.Filled" Color="Color.Error">UnPaid</MudChip>
            }
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public bool _loading { get; set; } = true;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
    private string searchString = "";
    private AdditionalCharges selectedItem1 = null;
    private HashSet<AdditionalCharges> selectedItems1 = new HashSet<AdditionalCharges>();
    private IEnumerable<AdditionalCharges> Elements = new List<AdditionalCharges>();
    private string _selectedValue = "All";

    protected override async Task OnInitializedAsync()
    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/damage-record"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<AdditionalCharges>>>("https://localhost:7190/api/additional-charges", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    private bool FilterFunc(AdditionalCharges element)
    {
        string status = "";
        if (element.IsPaid == true)
        {
            status = "Paid";
        }
        else if (element.IsPaid == false)
        {
            status = "UnPaid";
        }

        //filtering function
        if (string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            return true;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            if (element.CarId.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
            return false;
        }
        else if (string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status)
            {
                return true;
            }
            return false;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status && (element.CarId.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            {
                return true;
            }
            return false;
        }
        return false;
    }
}