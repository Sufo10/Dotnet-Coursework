@page "/car-reports"
@using System.Net.Http.Json
@using MudBlazor
@using System.Text;
@using Newtonsoft.Json;
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Car Reports</PageTitle>
<MudTable Class="mt-5" Items="@Elements" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<CarReportDetails,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Car Reports</MudText>
        <MudSpacer />
        <MudSelect Margin="Margin.Dense" T="string" Label="Availability" Variant="Variant.Outlined" Class="justify-content-center" @bind-Value="_selectedValue">
            <MudSelectItem Value="@("Available")" />
            <MudSelectItem Value="@("On Rent")" />
            <MudSelectItem Value="@("All")" />
        </MudSelect>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:16%;" />
        <col style="width:16%;" />
        <col style="width:16%;" />
        <col style="width:16%;" />
        <col style="width:16%;" />
        <col style="width:16%;" />
        <col style="width:16%;" />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel Class="text-center"  SortBy="new Func<CarReportDetails, object>(x=>x.Name)"> Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<CarReportDetails, object>(x=>x.Image)">Image</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<CarReportDetails, object>(x=>x.ActualPrice)">Actual Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<CarReportDetails, object>(x=>x.RatePerDay)">Offer Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<CarReportDetails, object>(x=>x.IsAvailable)">Availability</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" InitialDirection="SortDirection.Descending" SortBy="new Func<CarReportDetails, object>(x=>x.NumberOfRentals)">Rent Counts</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-center" DataLabel="Car Name">@context.Name</MudTd>
        <MudTd Class="text-center" DataLabel="Car Name">
            <MudImage Width="60" Height="60" Src=@context.Image Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
        </MudTd>
        <MudTd Class="text-center" DataLabel="Acutal Price">@context.ActualPrice</MudTd>
        <MudTd Class="text-center" DataLabel="Rate Per Day">@context.RatePerDay</MudTd>
        <MudTd Class="text-center" DataLabel="Availability">
            @if (context.IsAvailable)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Success">Available</MudChip>
            }
            else
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">On Rent</MudChip>
            }
        </MudTd>
        <MudTd Class="text-center" DataLabel="Count">@context.NumberOfRentals</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>
@*<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>*@

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public bool _loading { get; set; } = true;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private CarReportDetails selectedItem1 = null;
    private HashSet<CarReportDetails> selectedItems1 = new HashSet<CarReportDetails>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<CarReportDetails> Elements = new List<CarReportDetails>();
    private string _selectedValue = "All";

    protected override async Task OnInitializedAsync()
    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/car-reports"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<CarReportDetails>>>("https://localhost:7190/api/reports/car", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    private bool FilterFunc(CarReportDetails element)
    {
        string status = "All";
        if (element.IsAvailable)
        {
            status = "Available";
        }
        else
        {
            status = "On Rent";
        }

        // filtering condition
        if (string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            return true;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue == "All")
        {
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
            return false;
        }
        else if (string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status)
            {
                return true;
            }
            return false;
        }
        else if (!string.IsNullOrWhiteSpace(searchString) && _selectedValue != "All")
        {
            if (_selectedValue == status && element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }
        
        return false;
    }
}