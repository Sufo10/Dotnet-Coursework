@page "/"
@inject IDialogService DialogService
@inject IConfiguration _config
@inject HttpClient _httpClient
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

<PageTitle>Index</PageTitle>

<div class="d-flex justify-space-between">
    <MudText class="my-5 text-white" Typo="Typo.h5">Cars Available, @User.Username</MudText>
    @if (User.Role == "Admin" || User.Role == "Staff")
    {
        <MudCardActions>
            <MudButton OnClick="@((e) => OpenAddDialog(maxWidth))" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Add Cars</MudButton>
        </MudCardActions>
    }
</div>
<MudGrid Spacing=2 Justify="Justify.FlexStart">
    @if (Cars.Count > 0)
    {

        @foreach (var item in Cars)
        {
            <MudItem>

                <MudCard width="350px">
                    <div class="w-full h-full hover-card">
                        <div class="container-fluid card-image mt-2">
                            <img height="200" class="object-fit-contain overflow-hidden hover-image rounded mt-3"
                                 src=@item.Image />
                        </div>
                        <MudCardContent>
                            <div class="d-flex align-items-center justify-space-between">
                                <MudText Typo="Typo.h5">@item.Name</MudText>
                                <div>
                                    <span>Rs.</span>
                                    <span class="fw-bold fs-5">2000</span>
                                    <span class="fs-6 text-secondary">/ DAY</span>
                                </div>
                            </div>
                            <div Class="d-flex">
                                <MudText class="mt-4" Typo="Typo.body2">@item.Description</MudText>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="@((e) => OpenDialog(fullScreen,item))" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Book Now</MudButton>
                        </MudCardActions>
                    </div>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>


@code{
    DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public List<Cars> Cars { get; set; } = new List<Cars>();
    async Task OpenDialog(DialogOptions options, Cars car)
    {
        var parameters = new DialogParameters { ["car"] = car, ["User"]=User };

        var dialog = await DialogService.ShowAsync<BookingConfirm>("Book a Car", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Console.WriteLine("Is Deleted");
        }
    }

    async Task OpenAddDialog(DialogOptions options)
    {
        var dialog = await DialogService.ShowAsync<AddCars>("Add New Car", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<Coursework.Presentation.Data.Models.Cars>>>("https://localhost:7190/api/cars", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Cars = jsonResponse.Data;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<Coursework.Presentation.Data.Models.Cars>>>("https://localhost:7190/api/cars", User.Token);

        if (jsonResponse != null && jsonResponse.Status == "Success")
        {
            Cars = jsonResponse.Data;
        }
    }
}
