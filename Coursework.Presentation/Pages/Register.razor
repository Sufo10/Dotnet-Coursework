@page "/register"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text;
@using Newtonsoft.Json;
@inject NavigationManager NavManager
using Microsoft.JSInterop;

@inject ISnackbar Snackbar
<PageTitle>Register</PageTitle>
<div class="row min-vh-100">
    <div class="col-12 d-flex justify-content-center align-item-center">
        <MudPaper Width="650px" Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true">

            <div class="text-center mx-auto">

                <MudText Class="mt-1 mx-auto" Typo="Typo.h5">Register</MudText>
            </div>
            <div class="mt-3">
                <MudForm @ref="form" @onsubmit="handleSubmit" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                    <MudGrid Spacing=3>
                        <MudItem xs="12">
                            <MudTextField Class="mt-3" @bind-Value="UserName" Required="true" RequiredError="Username is required" Label="UserName" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid Spacing=3>
                        <MudItem xs="12">
                            <MudTextField Class="mt-3" @bind-Value="Name" Required="true" RequiredError="Name is required" Label="Name" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid Spacing=3>
                        <MudItem xs="6">
                            <MudTextField Class="mt-3" @bind-Value="Phone"
                                          Required="true"
                                          RequiredError="Phone number is required" Label="Mobile Number" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="string" Class="mt-3" @bind-Value="Email" Required="true" RequiredError="Email is required" Label="Email"
                                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"
                                          Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid Spacing=3>
                        <MudItem xs="12">
                            <MudTextField Class="mt-7" @bind-Value="Address" Required="true" RequiredError="Address is required" Label="Address" Variant="Variant.Outlined" Clearable="true" Immediate="true" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid Spacing=3>
                        <MudItem xs="6">
                            <MudTextField Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                          RequiredError="Password is required!"
                                          @ref="pwField1"
                                          Class="mt-7" @bind-Value="Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Class="mt-7" @bind-Value="ConfirmPassword" Label=" Confirm Password" Variant="Variant.Outlined"
                                          Validation="@(new Func<string, string>(PasswordMatch))" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                        </MudItem>
                    </MudGrid>
                    <MudFileUpload Class="mt-7" T="IBrowserFile" Accept=".png" FilesChanged="UploadFiles2" MaximumFileCount="1">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload Documents
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>

                    @if (files != null)
                    {
                        <MudList>

                            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                                @files.Name <code>@files.Size bytes</code>
                            </MudListItem>
                            <MudRadioGroup @bind-SelectedOption="@FileType">
                                <MudRadio Option="@("Citizenship")" Color="Color.Primary">Citizenship</MudRadio>
                                <MudRadio Option="@("License")" Color="Color.Primary">License</MudRadio>
                            </MudRadioGroup>
                        </MudList>
                    }
                    else
                    {

                        <MudText>
                            Upload driving license or citizenship (Optional)
                        </MudText>
                    }
                    <MudCardActions>
                        <MudButton Disabled="@(_processing || !success)"
                                   Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Class="mt-14" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary"
                                   ButtonType="ButtonType.Submit">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Register</MudText>
                            }

                        </MudButton>
                    </MudCardActions>
                </MudForm>
                <div class="d-flex justify-content-center">
                    <MudLink Href="login" Class="mt-5 mx-auto text-center text-primary" Typo="Typo.body2">Already a member? Login</MudLink>
                </div>
            </div>
        </MudPaper>
    </div>

</div>
@code {
    public string Email { get; set; }
    public string Name { get; set; }
    public string UserName { get; set; }
    public string Phone { get; set; }
    public string Password { get; set; }
    public string ConfirmPassword { get; set; }
    private bool _processing = false;
    private string Address { get; set; }
    public string FileType { get; set; }
    public bool Dense_Radio { get; set; } = true;
    MudTextField<string> pwField1;
    MudForm form;
    string[] errors = { };
    bool isShow;
    bool success;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    IBrowserFile files { get; set; }

    private void UploadFiles2(IBrowserFile file)
    {
        files = file;
        //TODO upload the files to the server

    }


    async Task handleSubmit()
    {
        _processing = true;
        await Task.Delay(1000);
        Console.WriteLine("Function Invoved");
        var client = new HttpClient();
        var formData = new MultipartFormDataContent();
        //var formData = new FormData();

        // Add string content
        formData.Add(new StringContent(Name), "name");
        formData.Add(new StringContent(Phone.ToString()), "phone");
        formData.Add(new StringContent(UserName.ToString()), "username");
        formData.Add(new StringContent(Email.ToString()), "email");
        formData.Add(new StringContent(Password.ToString()), "password");
        formData.Add(new StringContent(ConfirmPassword.ToString()), "confirmpassword");
        formData.Add(new StringContent(Address.ToString()), "address");

        // Add file content
        if (files != null)
        {
            var fileContent = new StreamContent(files.OpenReadStream());
            formData.Add(fileContent, "file", files.Name);
            if (Dense_Radio == true)
            {
                formData.Add(new StringContent("Citizenship"), "filetype");
            }
            else
            {
                formData.Add(new StringContent("License"), "filetype");
            }
        }

        // Send the request
        var response = await client.PostAsync("https://localhost:7190/api/register", formData);
        var result = await response.Content.ReadAsStringAsync();
        dynamic jsonResponse = JsonConvert.DeserializeObject(result);
        _processing = false;
        Console.WriteLine(jsonResponse);
        if (jsonResponse.status == "Success")
        {
            success = true;
            Snackbar.Add("Confiramtion Mail has been sent to your email", Severity.Success);
            NavManager.NavigateTo("/login");
            StateHasChanged();
        }
        else if (jsonResponse.status == "Error")
        {
            Snackbar.Add($"{jsonResponse.message}", Severity.Error);
            errors = new string[] { "Failed to upload file." };
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Some Problem Occured", Severity.Error);
            StateHasChanged();
        }
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
