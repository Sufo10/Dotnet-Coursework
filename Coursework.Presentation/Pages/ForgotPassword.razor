@page "/forgot-password"
@using System.Text;
@using Newtonsoft.Json;
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions;
@inject NavigationManager NavManager
@inject ISnackbar Snackbar


<PageTitle>Forgot Password</PageTitle>
<div class="row min-vh-100">
    <div class="col-12 d-flex justify-content-center align-item-center">
        @if (_success)
        {
            <MudPaper Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius: 8px;">
                <div class="text-center mx-auto">
                    <MudText Class="mt-1 mx-auto text-primary" Typo="Typo.h5">Email Sent Successful.</MudText>
                </div>
                <div class="mt-3">
                    <p>Your reset password link has been sent to your email. If you have typed a valid email, you will receive the link.</p>
                </div>
                <div class="d-flex text-start">
                    <MudLink Href="login" Class="mt-5 text-primary" Typo="Typo.body2">Back to Login</MudLink>
                </div>
            </MudPaper>
        }
        else
        {
            <MudPaper Width="350px" Height="300px" Class="pa-5 mx-auto ma-2 mt-15" Outlined="true" Square="true" Style="box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;border-radius: 8px;">
                <MudForm @ref="form" @onsubmit="handleSubmit" @bind-IsValid="@formValidationSuccess" @bind-Errors="@errors" ReadOnly="false">

                    <div class="text-center mx-auto">
                        <MudText Class="mt-1 mx-auto" Typo="Typo.h5">Forgot Password</MudText>
                    </div>
                    <div class="mt-3">
                        <MudTextField Required="true"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Enter a valid email!"})"
                                  RequiredError="Email is required!" Class="mt-7" @bind-Value="Email" Label="Enter your Email" Variant="Variant.Outlined" Immediate="true" />
                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Large" StartIcon="@Icons.Material.Filled.Login" Class="mt-12" Disabled="@(_processing || !formValidationSuccess)" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Submit</MudText>
                            }
                        </MudButton>
                        <div class="d-flex justify-content-center">
                            <MudLink Href="login" Class="mt-5 mx-auto text-center text-primary" Typo="Typo.body2">Back to Login</MudLink>
                        </div>
                    </div>
                </MudForm>
            </MudPaper>
        }
    </div>
</div>


@code {
    public string Email { get; set; }
    private bool _processing = false;
    private bool _success = false;
    MudForm form;
    string[] errors = { };
    bool formValidationSuccess;

    // Forgot Password
    async Task handleSubmit()
    {
        try
        {
            _processing = true;
            var client = new HttpClient();
            var data = new { email = Email };
            var content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
            await client.PostAsync("https://localhost:7190/api/forgot-password", content);
            Snackbar.Add("Email Sent Successfully!", Severity.Success);
            _processing = false;
            _success = true;
            await Task.Delay(1000);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{e.Message}", Severity.Error);
            _processing = false;
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        formValidationSuccess = true;
        StateHasChanged();
    }
}

