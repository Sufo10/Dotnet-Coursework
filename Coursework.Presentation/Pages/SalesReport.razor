@page "/sales-report"
@using MudBlazor
@using System.Net.Http.Json
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudPaper Class="p-4">
    <MudGrid Class="p-3" Spacing="3">
        <MudItem Class="p-2" xs="12" sm="3">
            <MudDatePicker @ref="_picker" Label="Start Date" @bind-Date="startDate" AutoClose="true">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDatePicker>
            @*<MudDatePicker Label="Start Date" @bind-Date="startDate" />*@
        </MudItem>
        <MudItem Class="p-2" xs="12" sm="3">

            @*<MudDatePicker Label="End Date" @bind-Date="endDate" />*@
            <MudDatePicker @ref="_endpicker" Label="End Date" @bind-Date="endDate" AutoClose="true">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _endpicker.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => _endpicker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => _endpicker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDatePicker>
        </MudItem>
        @if (!_loading)
        {

            <MudItem Class="p-2" xs="12" sm="3">

                <MudSelect Label="Customer" T="string" @bind-Value="selectedCustomer">
                    <MudSelectItem Value="@("All")">All</MudSelectItem>
                    @foreach (var customer in customers)
                    {
                        <MudSelectItem Value="@customer">@customer</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

        }
        <MudItem Class="p-2 pt-4" xs="12" sm="3">


            <MudButton Class="mt-3" FullWidth="true" Color="Color.Primary" Variant="Variant.Filled" OnClick="FilterData">Filter</MudButton>
        </MudItem>
    </MudGrid>
    <MudTable Class="mt-5" Items="@filteredData" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info"
               SortLabel="Sort By" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Booking Request</MudText>
            <MudSpacer />
        </ToolBarContent>
        <ColGroup>
            <col style="width:16%;" />
            <col style="width:16%;" />
            <col style="width:16%;" />
            <col style="width:16%;" />
            <col style="width:16%;" />
            <col style="width:16%;" />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.CustomerName)">Customer Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.CarName)">Car Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.StartDate)">Start-Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.EndDate)">End-Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.Amount)">Amount</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<SalesReportDetails, object>(x=>x.ApprovedBy)">Approved By</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="text-center" DataLabel="Customer Name">@context.CustomerName</MudTd>
            <MudTd Class="text-center" DataLabel="Car Name">@context.CarName</MudTd>
            <MudTd Class="text-center" DataLabel="Start Date">@context.StartDate</MudTd>
            <MudTd Class="text-center" DataLabel="End Date">@context.EndDate</MudTd>
            <MudTd Class="text-center" DataLabel="Amount">@context.Amount</MudTd>
            <MudTd Class="text-center" DataLabel="Approved By">@context.ApprovedBy</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>
</MudPaper>

@code {

    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    MudDatePicker _picker;
    MudDatePicker _endpicker;
    private string selectedCustomer = "All";
    private List<SalesReportDetails> bookings;
    private HashSet<string> customers;
    private IEnumerable<SalesReportDetails> filteredData = new List<SalesReportDetails>();

    public bool _loading { get; set; } = true;
    protected override async Task OnInitializedAsync()

    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/sales-report"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<SalesReportDetails>>>("https://localhost:7190/api/sales-record", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                bookings = jsonResponse.Data;
                filteredData =
                    bookings
           .Where(b =>
           {
               DateTime rentStartDate;
               return !startDate.HasValue || !endDate.HasValue || (DateTime.TryParse(b.StartDate, out rentStartDate) && rentStartDate >= startDate && rentStartDate <= endDate);
           })
           .ToList()
                    ;
                customers = new HashSet<string>(bookings.Select(b => b.CustomerName));
                _loading = false;
            }
        }
    }


    private void FilterData()
    {
        filteredData = bookings
            .Where(b =>
            {
                DateTime rentStartDate;
                if (!DateTime.TryParse(b.StartDate, out rentStartDate)) return false;
                if (startDate.HasValue && rentStartDate < startDate) return false;
                if (endDate.HasValue && rentStartDate > endDate) return false;
                return true;
            })
            .Where(b => selectedCustomer == "All" || b.CustomerName == selectedCustomer)
            .ToList();
    }



    }


