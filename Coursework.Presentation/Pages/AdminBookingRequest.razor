@page "/booking-request"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Booking Request</PageTitle>
<MudTable Class="mt-5" Items="@Elements" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<AdminBooking,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Booking Request</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:20%;" />
        <col style="width:20%;" />
        <col style="width:20%;" />
        <col style="width:20%;" />
        <col style="width:20%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel Class="text-center" InitialDirection="SortDirection.Ascending" SortBy="new Func<AdminBooking, object>(x=>x.CustomerName)">Customer Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<AdminBooking, object>(x=>x.CarName)">Car Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<AdminBooking, object>(x=>x.CustomerPhone)">Customer Phone</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<AdminBooking, object>(x=>x.RentStartDate)">Start-Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<AdminBooking, object>(x=>x.RentEndDate)">End-Date</MudTableSortLabel></MudTh>
        <MudTh Class="text-center">Status</MudTh>
        <MudTh Class="text-center">Payment</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-center" DataLabel="Customer Name">@context.CustomerName</MudTd>
        <MudTd Class="text-center" DataLabel="Car Name">@context.CarName</MudTd>
        <MudTd Class="text-center" DataLabel="Customer Phone">@context.CustomerPhone</MudTd>
        <MudTd Class="text-center" DataLabel="Start Date">@context.RentStartDate</MudTd>
        <MudTd Class="text-center" DataLabel="Status">@context.RentEndDate</MudTd>
        <MudTd Class="text-center">
            @if (context.IsDeleted == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Cancelled</MudChip>
            }
            else if (context.IsCompleted == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Surface">Completed</MudChip>

            }
            else if (context.IsAppoved == false)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Rejected</MudChip>

            }
            else if (context.IsAppoved == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Success">Approved</MudChip>

            }
            else if (context.OnRent == true)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Info">On Rent</MudChip>

            }
            else if (context.IsAppoved == null)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Warning">Pending</MudChip>
            }

        </MudTd>
        <MudTd Class="text-center">
            @if (context?.payment != true)
            {
                <MudChip Variant="Variant.Filled" Color="Color.Error">Not Paid</MudChip>
            }
            else
            {
                <MudChip Variant="Variant.Filled" Color="Color.Tertiary">Paid</MudChip>

            }
        </MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
@if (context.IsAppoved !=true && context.payment!=true)
{
                <MudMenuItem @onclick="@((e)=>ApproveRequest(context.BookingId))">

                    <MudIcon Icon="@Icons.Material.Filled.Approval" Title="Add" />
                    Approve Request
                </MudMenuItem>
                <MudMenuItem>
                    <MudIcon Icon="@Icons.Material.Filled.Recommend" Title="Add" />
                    Reject Request
                </MudMenuItem>
}                    
                @if (context?.payment != true && context?.IsCompleted != true && context?.IsAppoved == true)
                {
                    <MudMenuItem @onclick="@((e) => OpenOfflinePayDialog(maxWidth, context))" Style="display: flex; align-items: center">
                        <MudIcon Icon="@Icons.Material.Filled.Payment" Title="Add" />
                        Offline Pay
                    </MudMenuItem>
                }
            </MudMenu>

        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>
@*<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>*@

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public bool _loading { get; set; } = true;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private AdminBooking selectedItem1 = null;
    private HashSet<AdminBooking> selectedItems1 = new HashSet<AdminBooking>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<AdminBooking> Elements = new List<AdminBooking>();

    async Task OpenUserAddDialog(DialogOptions options)
    {
        var parameters = new DialogParameters { ["User"] = User };
        var dialog = await DialogService.ShowAsync<AddUser>("Add New User", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _loading = true;
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<AdminBooking>>>("https://localhost:7190/api/car-request", User.Token ?? "");

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    async Task OpenOfflinePayDialog(DialogOptions options, AdminBooking booking)
    {
        var parameters = new DialogParameters { ["Booking"] = booking, ["User"] = User };
        var dialog = await DialogService.ShowAsync<OfflinePaymentModal>("Offline Payment", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _loading = true;
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<AdminBooking>>>("https://localhost:7190/api/car-request", User.Token ?? "");
            Console.WriteLine(jsonResponse);
            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    async Task ApproveRequest(string BookingId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to approve the request?.");
        parameters.Add("ButtonText", "Approve");
        parameters.Add("Color", Color.Success);
        parameters.Add("BookingId", BookingId);
        parameters.Add("User", User);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationBox>("Approve", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<AdminBooking>>>("https://localhost:7190/api/car-request", User.Token);
            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/booking-request"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<AdminBooking>>>("https://localhost:7190/api/car-request", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }


    //private void ApproveRequest(string BookingId)
    //{

    //}
    private bool FilterFunc(AdminBooking element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CustomerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CarName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}