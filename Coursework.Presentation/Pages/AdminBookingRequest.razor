@page "/booking-request"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient _httpClient
@inject IDialogService DialogService
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>User</PageTitle>
<div class="d-flex justify-end">
    <MudButton OnClick="@((e)=>OpenUserAddDialog(maxWidth))"
               Class="mt-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
</div>
<MudTable Class="mt-5" Items="@Elements" Dense="false" Hover="true" ReadOnly="true" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<EmployeeDetails,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:34%;" />
        <col style="width:33%;" />
        <col style="width:33%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel Class="text-center" InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeDetails, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<EmployeeDetails, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Class="text-center" SortBy="new Func<EmployeeDetails, object>(x=>x.Roles)">Role</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-center" DataLabel="Name">@context.Name</MudTd>
        <MudTd Class="text-center" DataLabel="Position">@context.Email</MudTd>
        <MudTd Class="text-center" DataLabel="Molar mass">@context.Roles</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>
@*<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>*@

@code {
    [CascadingParameter(Name = "UserInfo")]
    public UserInfo User { get; set; }
    public bool _loading { get; set; } = true
DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private EmployeeDetails selectedItem1 = null;
    private HashSet<EmployeeDetails> selectedItems1 = new HashSet<EmployeeDetails>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<EmployeeDetails> Elements = new List<EmployeeDetails>();

    async Task OpenUserAddDialog(DialogOptions options)
    {
        var parameters = new DialogParameters { ["User"] = User };
        var dialog = await DialogService.ShowAsync<AddUser>("Add New User", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _loading = true;
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<EmployeeDetails>>>("https://localhost:7190/api/employees", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("/user"))
        {
            var jsonResponse = await _httpClient.AuthGetAsync<ApiResult<List<EmployeeDetails>>>("https://localhost:7190/api/employees", User.Token);

            if (jsonResponse != null && jsonResponse.Status == "Success")
            {
                Elements = jsonResponse.Data;
                _loading = false;
            }
        }
    }

    private bool FilterFunc(EmployeeDetails element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Roles.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}